"use strict";var b=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var R=(e,t)=>{for(var s in t)a(e,s,{get:t[s],enumerable:!0})},d=(e,t,s,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of g(t))!x.call(e,o)&&o!==s&&a(e,o,{get:()=>t[o],enumerable:!(r=h(t,o))||r.enumerable});return e};var i=(e,t,s)=>(s=e!=null?b(A(e)):{},d(t||!e||!e.__esModule?a(s,"default",{value:e,enumerable:!0}):s,e)),E=e=>d(a({},"__esModule",{value:!0}),e);var S={};R(S,{default:()=>p,wasmLoader:()=>p});module.exports=E(S);var l=i(require("fs")),n=i(require("path"));var u=i(require("fs"));async function c(e){let t=await WebAssembly.compile(await u.default.promises.readFile(e));return{imports:WebAssembly.Module.imports(t),exports:WebAssembly.Module.exports(t)}}var w=JSON.stringify,$=(e,t)=>`import { ${t.join(", ")} } from ${w(e)};`,f=(e,t,s)=>Array.from(e).map(r=>t.apply(s,r));function D(e,t){let s=new Map;for(let r of t){let o=s.get(r.module);o?o.push(r.name):s.set(r.module,[r.name])}return`
        // Import from JS modules
        ${f(s,$).join(`
`)}

        // Build the WASM import object
        const ${e} = {
            ${f(s,(r,o)=>`[${w(r)}]: {
                ${o.join(`,
`)}
            }`).join(`,
`)}
        };`}function L(e,t){return t.map(s=>`export const ${s.name} = ${e}.${s.name};`).join(`
`)}async function W(e,t){let{imports:s,exports:r}=await c(e);return`
        import wasmModule from ${JSON.stringify(e)};

        ${D("imports",s)}

        async function loadWasm(module, imports) {
            if (typeof module === 'string') {

                // Resolve relative urls from the runtime script path
                if (module.startsWith('./')) {
                    module = new URL(module, import.meta.url).href
                }

                ${t==="node"?`
                    // Special handling for file URLs outside the browser
                    if (module.startsWith('file://')) {
                        const fs = await import('fs')
                        module = await fs.promises.readFile(new URL(module))
                    } else {
                `:""}

                const moduleRequest = await fetch(module);
                if (typeof WebAssembly.instantiateStreaming === 'function') {
                    try {
                        return await WebAssembly.instantiateStreaming(moduleRequest, imports);
                    } catch (e) {
                        if (moduleRequest.headers.get('Content-Type') != 'application/wasm') {
                            console.warn(e);
                        } else {
                            throw e;
                        }
                    }
                }
                module = await moduleRequest.arrayBuffer();

                ${t==="node"?"}":""}
            }
            return await WebAssembly.instantiate(module, imports);
        }

        export const { instance, module } = await loadWasm(wasmModule, imports);

        ${L("instance.exports",r)}
    `}var m="wasm-module",y="wasm-deferred",M="wasm-embedded";function p(e){var s;let t=((s=e==null?void 0:e.mode)==null?void 0:s.toLowerCase())=="embedded";return{name:"wasm",setup(r){r.onResolve({filter:/\.(?:wasm)$/},o=>{if(o.namespace===m)return{path:o.path,namespace:t?M:y};if(o.resolveDir!=="")return{path:n.default.isAbsolute(o.path)?o.path:n.default.join(o.resolveDir,o.path),namespace:m}}),r.onLoad({filter:/.*/,namespace:m},async o=>({contents:await W(o.path,r.initialOptions.platform),resolveDir:n.default.dirname(o.path)})),r.onLoad({filter:/.*/,namespace:y},async o=>({contents:await l.default.promises.readFile(o.path),loader:"file"})),r.onLoad({filter:/.*/,namespace:M},async o=>({contents:await l.default.promises.readFile(o.path),loader:"binary"}))}}}p.wasmLoader=p;0&&(module.exports={wasmLoader});
